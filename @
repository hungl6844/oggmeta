use std::io::{Read, Seek, Cursor};
use ogg::reading::PacketReader;

pub fn next_packet<T> (reader: &mut T) where
    T: Read
    + Seek {
       let mut packet_reader = PacketReader::new(reader);

       loop {
           let packet = packet_reader.read_packet();
           let mut packet_data;
           if let Ok(o) = packet {
               if let None = o {
                   println!("stream ended");
                   break;
               }
               packet_data = o.unwrap().data;
           } else {
               println!("error");
               break;
           }
           if packet_data[0..7] == [3, 118, 111, 114, 98, 105, 115] {
               println!("{packet_data:?}");
               parse_vorbis(&mut Cursor::new(&mut packet_data));
               break;
           }
       }
}

pub fn parse_vorbis<T> (vorbis: &mut T) where
    T: Read
    + Seek {
        vorbis.seek(std::io::SeekFrom::Start(8)).unwrap();
        let vendor_length = read_u32(vorbis);
        vorbis.seek(std::io::SeekFrom::Current(vendor_length.into())).unwrap();
        let list_length = read_u32(vorbis);
        for _x in 0..list_length {
            let length = read_u32(vorbis);
            let mut comment: Vec<u8> = vec![0_u8; length.try_into().unwrap()];
            vorbis.read_exact(&mut comment).unwrap();
            println!("{}", String::from_utf8(comment).unwrap());
        }
}

fn read_u8<T> (read: &mut T) -> u8 where
    T: Read {
    let mut buf = [0_u8; 1];
    read.read_exact(&mut buf).unwrap();
    buf[0]
}

fn read_u32<T> (read: &mut T) -> u32 where
    T: Read {
        let mut buf = [0_u8; 4];
        read.read_exact(&mut buf).unwrap();
        u32::from_le_bytes(buf)
}
